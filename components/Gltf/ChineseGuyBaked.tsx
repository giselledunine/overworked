/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/chineseGuyBAKED.glb -o components/Gltf/ChineseGuyBAKED.tsx 
*/

import * as THREE from "three";
import React, { JSX, useEffect } from "react";
import { useGraph, useLoader } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { TextureLoader } from "three";

type ActionName =
    | "mouseAnimatedAction"
    | "crouch"
    | "mouseMouvement"
    | "armatureMouseMouvement"
    | "rigAction";

interface GLTFAction extends THREE.AnimationClip {
    name: ActionName;
}

type GLTFResult = GLTF & {
    nodes: {
        eyeLeft: THREE.SkinnedMesh;
        eyeRight: THREE.SkinnedMesh;
        features: THREE.SkinnedMesh;
        head: THREE.SkinnedMesh;
        body: THREE.SkinnedMesh;
        computer: THREE.Mesh;
        deskWalls: THREE.Mesh;
        desk: THREE.Mesh;
        chair: THREE.Mesh;
        computerScreenLight: THREE.Mesh;
        mouseAnimatedLowPoly: THREE.Mesh;
        mixamorigHips: THREE.Bone;
        Ctrl_Master: THREE.Bone;
        root: THREE.Bone;
        ["MCH-eyeparentL"]: THREE.Bone;
        ["MCH-eyeparentR"]: THREE.Bone;
        ["MCH-lip_armBL001"]: THREE.Bone;
        ["MCH-lip_armBR001"]: THREE.Bone;
        ["MCH-lip_armTL001"]: THREE.Bone;
        ["MCH-lip_armTR001"]: THREE.Bone;
        neutral_bone: THREE.Bone;
        Ctrl_ArmPole_IK_Left: THREE.Bone;
        Ctrl_Hand_IK_Left: THREE.Bone;
        Ctrl_ArmPole_IK_Right: THREE.Bone;
        Ctrl_Hand_IK_Right: THREE.Bone;
        Ctrl_Foot_IK_Left: THREE.Bone;
        Ctrl_LegPole_IK_Left: THREE.Bone;
        Ctrl_Foot_IK_Right: THREE.Bone;
        Ctrl_LegPole_IK_Right: THREE.Bone;
    };
    animations: GLTFAction[];
};

export function Model(props: JSX.IntrinsicElements["group"]) {
    const group = React.useRef<THREE.Group>(null);
    const { scene, animations } = useGLTF("/chineseGuyBAKED.glb");
    const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
    const { nodes } = useGraph(clone) as unknown as GLTFResult;
    const { actions } = useAnimations(animations, group);

    const textureChair = useLoader(TextureLoader, "bakeChair.jpg");
    const textureDesk = useLoader(TextureLoader, "bakedDesk.jpg");
    const textureDeskWalls = useLoader(TextureLoader, "bakedDeskWalls.jpg");
    const textureComputer = useLoader(TextureLoader, "bakedComputer.jpg");
    const textureHead = useLoader(TextureLoader, "bakedHead.jpg");
    const textureHeadRoughness = useLoader(
        TextureLoader,
        "bakedHeadRoughness.jpg"
    );
    textureHead.flipY = false;
    textureHeadRoughness.flipY = false;
    textureHead.colorSpace = THREE.SRGBColorSpace;
    textureHeadRoughness.colorSpace = THREE.SRGBColorSpace;
    const textureFeatures = useLoader(TextureLoader, "bakedFeatures.jpg");
    textureFeatures.flipY = false;
    textureFeatures.colorSpace = THREE.SRGBColorSpace;
    const textureBody = useLoader(TextureLoader, "bakedBody.jpg");
    textureBody.flipY = false;
    textureBody.colorSpace = THREE.SRGBColorSpace;
    const textures = [
        textureChair,
        textureDesk,
        textureDeskWalls,
        textureComputer,
    ];
    textures.forEach((texture) => {
        texture.flipY = false;
        texture.colorSpace = THREE.SRGBColorSpace;
    });
    const textureMaterials = Array(4)
        .fill(0)
        .map((_, i) => {
            return new THREE.MeshBasicMaterial({ map: textures[i] });
        });
    const textureHeadMaterial = new THREE.MeshBasicMaterial({
        map: textureHead,
    });
    const textureFeaturesMaterial = new THREE.MeshBasicMaterial({
        map: textureFeatures,
    });
    const textureBodyMaterial = new THREE.MeshBasicMaterial({
        map: textureBody,
    });
    const textureComputerScreen = new THREE.MeshStandardMaterial({
        emissive: new THREE.Color("9CD0E7"),
        emissiveIntensity: 4,
    });

    nodes.chair.material = textureMaterials[0];
    nodes.desk.material = textureMaterials[1];
    nodes.deskWalls.material = textureMaterials[2];
    nodes.computer.material = textureMaterials[3];
    nodes.head.material = textureHeadMaterial;
    nodes.features.material = textureFeaturesMaterial;
    nodes.eyeLeft.material = textureFeaturesMaterial;
    nodes.eyeRight.material = textureFeaturesMaterial;
    nodes.body.material = textureBodyMaterial;
    nodes.computerScreenLight.material = textureComputerScreen;

    useEffect(() => {
        console.log("actions", actions);
        actions["mouseAnimatedAction"]?.play();
        actions["rigAction"]?.play();
        actions["mouseMouvement"]?.play();
    }, [actions]);
    return (
        <>
            <group ref={group} {...props} dispose={null}>
                <group name="Scene">
                    <group name="Armature" position={[-1.81, 0, 1.909]}>
                        <primitive object={nodes.mixamorigHips} />
                        <primitive object={nodes.Ctrl_Master} />
                        <primitive object={nodes.Ctrl_ArmPole_IK_Left} />
                        <primitive object={nodes.Ctrl_Hand_IK_Left} />
                        <primitive object={nodes.Ctrl_ArmPole_IK_Right} />
                        <primitive object={nodes.Ctrl_Hand_IK_Right} />
                        <primitive object={nodes.Ctrl_Foot_IK_Left} />
                        <primitive object={nodes.Ctrl_LegPole_IK_Left} />
                        <primitive object={nodes.Ctrl_Foot_IK_Right} />
                        <primitive object={nodes.Ctrl_LegPole_IK_Right} />
                        <skinnedMesh
                            name="body"
                            geometry={nodes.body.geometry}
                            material={nodes.body.material}
                            skeleton={nodes.body.skeleton}
                        />
                    </group>
                    <mesh
                        name="computer"
                        geometry={nodes.computer.geometry}
                        material={nodes.computer.material}
                        position={[-5.239, 3.858, 5.106]}
                        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
                    />
                    <mesh
                        name="deskWalls"
                        geometry={nodes.deskWalls.geometry}
                        material={nodes.deskWalls.material}
                        position={[-5.239, 3.858, 5.106]}
                        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
                    />
                    <mesh
                        name="desk"
                        geometry={nodes.desk.geometry}
                        material={nodes.desk.material}
                        position={[-5.239, 3.858, 5.106]}
                        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
                    />
                    <mesh
                        name="chair"
                        geometry={nodes.chair.geometry}
                        material={nodes.chair.material}
                        position={[-5.239, 3.858, 5.106]}
                        rotation={[Math.PI / 2, 0, -Math.PI / 2]}
                    />
                    <mesh
                        name="computerScreenLight"
                        geometry={nodes.computerScreenLight.geometry}
                        material={nodes.computerScreenLight.material}
                        position={[-1.418, 4.564, 4.922]}
                        scale={1.123}
                    />
                    <mesh
                        name="mouseAnimatedLowPoly"
                        geometry={nodes.mouseAnimatedLowPoly.geometry}
                        material={nodes.mouseAnimatedLowPoly.material}
                        position={[-3.37, 3.134, 3.414]}
                    />
                </group>
            </group>
        </>
    );
}

useGLTF.preload("/chineseGuyBAKED.glb");
